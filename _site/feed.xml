<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Briana's Blog</title>
    <description>Trying the best version of myself</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 06 Oct 2019 11:41:19 -0500</pubDate>
    <lastBuildDate>Sun, 06 Oct 2019 11:41:19 -0500</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>A few concepts about Fastly and Varnish</title>
        <description>&lt;p&gt;I started to hear about CDNs since I joined my current job. One of the CDNs we use is Fastly, it is being used in almost all of our projects so I got a brief introduction about it when I first joined the company. At that time I learned that Fastly was a Content Delivery Network that sits in front of every project’s infrastructure and handles cache.&lt;/p&gt;

&lt;p&gt;Since then, I have barely interacted with it actively, however, I was recently assigned to a new project and they are expected to go live in a couple of weeks but, they are planning on going live only on specific regions of a country and they want authentication set up for one specific region. In order to do that I need to perform configuration changes on Fastly.&lt;/p&gt;

&lt;p&gt;So today I learned a couple more things about Fastly and overall CDNs…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;That behind Fastly there is a software named Varnish&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;That Varnish is an HTTP caching system. In fact, Varnish is an HTTP accelerator designed for content-heavy dynamic web sites.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what does content-heavy dynamic web sites even mean?&lt;/p&gt;

&lt;p&gt;Well, when a website has a lot of dynamic content (web content that changes based on the behavior, preferences, and interests of the user), that will cause the backend servers to be constantly active because every time a resource is requested it will be requested from them since dynamic content is not cacheable. So Varnish helps to easy the workload the backend servers receive by caching part of the content, the static content, hence serving it itself without the need to reach out to it to the backend servers as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;Varnish will cash only static content.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;I also learned that Varnish is designed to work specifically with HTTP.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;That an HTTP accelerator is a proxy server that reduces web site access time.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;That VCL is Varnish Configuration Language and it is the domain specific language of Varnish and the way we apply rules to it. Varnish will translates this configurations into binary code and execute them when the request arrives. In fact, Fastly actually reads a VCL file where we can put all the Varnish rules we want to apply.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;That the VCL file is divided into subroutines that are applied at different times. One is executed when the request arrives to the website and another when files are fetched from the backend servers.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Subroutines:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;vcl_recv = is called at the beginning of a request, after the complete request has been received and parsed. Its purpose is to decide whether or not to serve the request, how to do it, and, if applicable, which backend to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;vcl_fetch = is called after a document has been successfully retrieved from the backend. Normal tasks here are to alter the response headers, trigger ESI processing, try alternate backend servers in case the request failed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;According to the documentation, 99% of all the changes you’ll need to do in Varnish will be done in those two subroutines (vcl_recv and vcl_fetch).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So, going back to the reason I got this task, if I need to limit the access to a website to a specific region by using Varnish rules, then I need to add a rule to the vcl_recv subroutine, because that’s the subroutine than decides what to do with the request when it first arrives. Besides that, I also need to make use of Fastly Geolocation VCL features.&lt;/p&gt;

&lt;p&gt;In the case of Fastly, it basically has a list of variables that facilitates making configuration changes on the VCL file. The variable I’ll need to make use of is “client.geo.region”. So, for example, if I want to limit the access to my website, let’s say www.brianasz.com to the states of Sinaloa and Sonora, Mexico, then we need to use something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; client.geo.region &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SIN&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; client.geo.region &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SON&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
  error 404 &lt;span class=&quot;s2&quot;&gt;&quot;Not Found&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Where SIN is Sinaloa and SON is Sonora according to the ISO 3166-2 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# country code subdivision&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this does is, if traffic coming to the website doesn’t come from the state of Sinaloa or Sonora, Mexico, then the website should return a 404 not found error.&lt;/p&gt;

&lt;p&gt;And how do I set up authentication for one specific region, for example Sinaloa?… With something like this:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; client.geo.region &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SIN&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; table.lookup&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;customer_keys, req.http.Authorization&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    error 401 &lt;span class=&quot;s2&quot;&gt;&quot;Restricted&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;that, and with a VCL snippet that contains the actual keys, something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;table customer_keys &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;Basic key_value_pair_basae64_encoded&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;project_name&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The region code is based on ISO 3166-2 country code subdivision.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Sometimes I have a hard time to structure the ideas in my head in order to write something in here. There is plenty of topics to write about and a lot I don’t know of technical stuff, so I though, why not just writing small blogs about what I learned today, and this came up. I’ll try to keep doing this. It helps me to memorize things and understand them better. So, this is the summary of what I learned today, about how to restrict access by region to a website using Fastly and Varnish.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.fastly.com/vcl/geolocation/&quot;&gt;Fastly Geolocation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_3166-2&quot;&gt;ISO_3166-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.fastly.com/en/guides/basic-authentication&quot;&gt;Basic Authentication&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://varnish-cache.org/docs/trunk/users-guide/vcl.html&quot;&gt;Varnish Configuration Language&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Sep 2019 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2019/09/30/A-few-concepts-about-Fastly-and-Varnish.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2019/09/30/A-few-concepts-about-Fastly-and-Varnish.html</guid>
        
        
      </item>
    
      <item>
        <title>Confusing haproxy and keepalived configuration</title>
        <description>&lt;p&gt;Recently I had a very confusing question in my job about a configuration I knew nothing about. 
It was a configuration made before I joined the company and it was about an entry in /etc/hosts on every VPS of a specific project, let’s call it project Panda!&lt;/p&gt;

&lt;p&gt;The entry was the following:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;192.168.3.200	prod-db-internal.panda.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The question was, who is prod-db-internal.panda.com? and why is it accesible from the internet? (the customer pinged the IP and it returned a public IP).
It sounded like an easy question, but it turned out to be more than I expected. Before digging into the investigation, first let me show you a diagram of the infrastructure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/architecture-haproxyblog.png&quot; alt=&quot;Architecture Diagram&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the short answer must be that it is one of the db servers but it wouldn’t make sense, so the next short answer is that it must be one of the haproxy servers and most likely the master, right?, but if so, then why the hell is it public? (according to the customer), it shouldn’t.&lt;/p&gt;

&lt;p&gt;Well, let’s find out and for once and for all, the purpose of it as well.&lt;/p&gt;

&lt;p&gt;Since the customer could ping it and returned an IP address, I did the same. But, locally from my machine, ping was not resolving the hostname, neither nslookup nor dig were returning any answer about it. How on earth were they able to ping it? I don’t know, but they probably had an entry in their local /etc/hosts for it.&lt;/p&gt;

&lt;p&gt;So, back to the investigation. 
I knew the entry was being added by an internal chef cookbook to the VPS’s (it is based on the community hostfile cookbook) but I didn’t know how it was being added by the cookbook. After a quick look at it, it turned out it was being directly added as an static IP:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hostsfile'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'statics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ip_address: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'192.168.3.200'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host_name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'prod-db-internal.panda.com'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But, what was the purpose of it?… From my knowledge about the project I knew the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The db cluster was composed of 3 nodes.&lt;/li&gt;
  &lt;li&gt;The cluster was being load balanced by an haproxy cluster of two nodes… and…&lt;/li&gt;
  &lt;li&gt;… after reviewing a little bit more, the domain name (prod-db-internal.panda.com) was actually being used by the java application of the project, as such:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.url=jdbc:mysql://prod-db-internal.panda.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It started to make more sense, that domain name was the entry from the java application to the database. But, still, who was that IP address?&lt;/p&gt;

&lt;p&gt;Next step I checked for the private IP addresses of the haproxy and db servers. At first I used &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; which was misleading and it made the whole research a mess because it didn’t show all the information I needed, specifically that one network interface (eth2) had secondary IP addresses. &lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt; only showed me one IP address for eth2 interface, omitting the secondary where in fact was the one I was looking for, making the investigation process a mess for a moment. Rooky mistake from my part, I admit it!&lt;/p&gt;

&lt;p&gt;After checking the IP addresses with &lt;code class=&quot;highlighter-rouge&quot;&gt;ip addr show&lt;/code&gt;, I got the answer I was looking for. 
None of the db servers were &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.3.200&lt;/code&gt; IP, but one of the haproxy servers was.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;prod-haproxy-000.panda.com “ip addr show” command output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4: eth2: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether bc:76:4e:05:6c:1c brd ff:ff:ff:ff:ff:ff
    inet 192.168.3.4/24 brd 192.168.3.255 scope global eth2
    inet 192.168.3.200/32 scope global eth2
    inet6 fe80::be76:4eff:fe05:6c1c/64 scope &lt;span class=&quot;nb&quot;&gt;link
       &lt;/span&gt;valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Bingo!!! 
But, what happens then with the second haproxy server? (It had a different secondary IP address)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;prod-haproxy-001.panda.com “ip addr show” command output:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4: eth2: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether bc:76:4e:05:eb:70 brd ff:ff:ff:ff:ff:ff
    inet 192.168.3.5/24 brd 192.168.3.255 scope global eth2
    inet 192.168.3.201/32 scope global eth2
    inet6 fe80::be76:4eff:fe05:eb70/64 scope &lt;span class=&quot;nb&quot;&gt;link
       &lt;/span&gt;valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m not very knowledgeable about haproxy configuration so I remained confused.&lt;/p&gt;

&lt;p&gt;So, what I didn’t thought about before was that a single haproxy server can act as a load balancer for the db cluster but having such configuration would have made the LB the single point of failure for the system. So for true high availability 2 haproxy servers (load balancers) would be needed with some sort of failover. The thing is, haproxy doesn’t provide a way to do that by itself, however, the failover capability hence the true high available system can be accomplished by using VRRP and keepalived, which are the technologies being used in this particular project.&lt;/p&gt;

&lt;p&gt;Accoding to wikipedia:&lt;/p&gt;

&lt;p&gt;VRRP is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Virtual Router Redundancy Protocol (VRRP) is a computer networking protocol that provides for automatic assignment of available 
Internet Protocol (IP) routers to participating hosts. This increases the availability and reliability of routing paths via automatic
default gateway selections on an IP subnetwork.
The protocol achieves this by creation of virtual routers, which are an abstract representation of multiple routers, i.e. master and
backup routers, acting as a group. The default gateway of a participating host is assigned to the virtual router instead of a 
physical router. If the physical router that is routing packets on behalf of the virtual router fails, another physical router is 
selected to automatically replace it. The physical router that is forwarding packets at any given time is called the master router.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Keepalived is:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Keepalived is a routing software written in C. The main goal of this project is to provide simple and robust facilities for 
loadbalancing and high-availability to Linux system and Linux based infrastructures.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The most common configuration in these cases would be that if the load balancer went down (node prod-haproxy-000.panda.com), the website would become unavailable. The easiest way to avoid having the load balancer being a single point of failure is to set up an active / passive HAProxy pair. This would require two HAProxy servers and a virtual IP that can float between the two servers. The active HAProxy server would handle all of the requests unless it went down, at which point the passive HAProxy server would take over the requests, and VRRP and Keepalived can help with it.&lt;/p&gt;

&lt;p&gt;Keepalived acts as a daemon running on both haproxy servers and checks for the haproxy process status. On its configuration there is a priority flag that defines which node of the two haproxies (LB nodes) is the master or active node. Master has a higher priority. If the haproxy process fails on the master node, keepalived will lower the priority of the failed node and failover to the other node. So, basically, the two load balancer nodes monitor each other using keepalived, and if the master fails, the slave becomes the master, which means the users will not notice any disruption of the service. Above information is under the assumption that a shared IP is being used, which is nothing more than a shared IP between the two load-balancers that is active only on one of them at any moment (on whichever is the master).&lt;/p&gt;

&lt;p&gt;But, that is not how the configuration on this project was set up. This particular project was not using a shared IP and I confirmed that because,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;IP &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.3.200&lt;/code&gt; belonged specifically to node &lt;code class=&quot;highlighter-rouge&quot;&gt;prod-haproxy-000.panda.com&lt;/code&gt;, so it wasn’t interchangeable, and…&lt;/li&gt;
  &lt;li&gt;Because &lt;code class=&quot;highlighter-rouge&quot;&gt;keepalived&lt;/code&gt; for this project was being configured by the keepalive chef cookbook version 1.2.0 and it had the &lt;code class=&quot;highlighter-rouge&quot;&gt;default['keepalived']['shared_address']&lt;/code&gt; attribute set to false, meaning it is not working under that shared IP configuration.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In fact, this particular project, by default (well, by the static entry added in /etc/hosts) is identifying node &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.3.200 - prod-haproxy-000.panda.com&lt;/code&gt; as the load balancer for the db cluster and the application uses it for that, that’s the one being identified as the master as long as the rest of the architecture can tell. Always!…&lt;/p&gt;

&lt;p&gt;But, now let’s take a look at the keepalived configuration for each LB node.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node prod-haproxy-000.panda.com:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/keepalived/keepalived.conf
&lt;span class=&quot;c&quot;&gt;# ------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Chef controlled file - Edits will be overwritten&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Environment - prod&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Node - prod-haproxy-000.panda.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ------------------------------------------------&lt;/span&gt;

vrrp_script chk_haproxy &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  script &lt;span class=&quot;s2&quot;&gt;&quot;killall -0 haproxy&quot;&lt;/span&gt;
  interval 2
  weight &lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


vrrp_instance 192.168.3.200 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  interface eth2
  state MASTER
  virtual_router_id 200
  priority 100
  virtual_ipaddress &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    192.168.3.200
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  track_script &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    chk_haproxy
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
vrrp_instance 192.168.3.201 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  interface eth2
  state MASTER
  virtual_router_id 201
  priority 99
  virtual_ipaddress &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    192.168.3.201
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  track_script &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    chk_haproxy
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Node prod-haproxy-001.panda.com:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/keepalived/keepalived.conf
&lt;span class=&quot;c&quot;&gt;# ------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Chef controlled file - Edits will be overwritten&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Environment - prod&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Node - prod-haproxy-001.panda.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ------------------------------------------------&lt;/span&gt;

vrrp_script chk_haproxy &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  script &lt;span class=&quot;s2&quot;&gt;&quot;killall -0 haproxy&quot;&lt;/span&gt;
  interval 2
  weight &lt;span class=&quot;nt&quot;&gt;-2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


vrrp_instance 192.168.3.201 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  interface eth2
  state MASTER
  virtual_router_id 201
  priority 100
  virtual_ipaddress &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    192.168.3.201
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  track_script &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    chk_haproxy
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
vrrp_instance 192.168.3.200 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  interface eth2
  state MASTER
  virtual_router_id 200
  priority 99
  virtual_ipaddress &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    192.168.3.200
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  track_script &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    chk_haproxy
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From above keepalived configuration both nodes are always the master but only one is being used at a time. And from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; entry, it results obvious that the application servers are always reaching out to &lt;code class=&quot;highlighter-rouge&quot;&gt;prod-haproxy-000.panda.com&lt;/code&gt; as the load balancer for the db cluster. Only when the haproxy process goes down on it, then the keepalived configuration on &lt;code class=&quot;highlighter-rouge&quot;&gt;prod-haproxy-000.panda.com&lt;/code&gt;, turns to the slave node (&lt;code class=&quot;highlighter-rouge&quot;&gt;prod-haproxy-001.panda.com&lt;/code&gt;), because it is the next in the priority line, and with an out of the box forwarding process keepalived then routes all the traffic coming to &lt;code class=&quot;highlighter-rouge&quot;&gt;prod-haproxy-000.panda.com&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;prod-haproxy-001.panda.com&lt;/code&gt;, which ultimately acts as the new master of the high available load balancer set up for the db cluster. Finally, when the haproxy process is restored on &lt;code class=&quot;highlighter-rouge&quot;&gt;prod-haproxy-000.panda.com&lt;/code&gt;, then it automatically becomes again the master load balancer node.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It was a little bit confusing to map all the different components of this setup mainly because I had no knowledge of VRRP and keepalived. Secondly because the settings were on different cookbooks and files so I had to map everything together, and finally because the current configuration is a little bit different of what I commonly found on the internet (because no shared IP is being used). Actually, if someone knows how this specific configuration is named I would be glad to know or be corrected if any asumptinos made here are wrong.&lt;/p&gt;

&lt;p&gt;Anyway, I’m glad I was asked about this set up, otherwise I wouln’t know how it worked and wouldn’t have improved my skills. Now if someone else ask, I can speak about it with more confidence.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-set-up-highly-available-web-servers-with-keepalived-and-floating-ips-on-ubuntu-14-04&quot;&gt;How to set up available web servers with keepalived and floating IPs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.haproxy.org/download/1.2/doc/architecture.txt&quot;&gt;Haproxy architecture&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.howtoforge.com/setting-up-a-high-availability-load-balancer-with-haproxy-keepalived-on-debian-lenny&quot;&gt;Setting up a high availability load balancer with haproxy and keepalived&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Aug 2019 00:00:00 -0500</pubDate>
        <link>http://yourdomain.com/2019/08/18/The-confusing-haproxy-and-keepalived-configuration-I-found.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2019/08/18/The-confusing-haproxy-and-keepalived-configuration-I-found.html</guid>
        
        
      </item>
    
  </channel>
</rss>
