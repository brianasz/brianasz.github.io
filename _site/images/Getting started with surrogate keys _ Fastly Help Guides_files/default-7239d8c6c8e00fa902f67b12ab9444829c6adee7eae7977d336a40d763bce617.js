
$(document).ready( function(){
  if( $("#left_column").hasClass('api') && $("#api-nav").hasClass('api-nav_imageopto') == false ) {
    affix_setup();
    scrollspy_setup();
  }
  $('#feedback .btn-group').click( function() { $('#feedback_2').show(); } );
  $("div.highlight").addClass('notranslate');
  $("code").addClass('notranslate');

  $("#right_column table:not(.no-pure):not(.rouge-table)").addClass('pure-table');
  $("#right_column .pure-table:not(.no-phorizontal)").addClass('pure-table-horizontal');
  $("#right_column .pure-table:not(.no-pstripe)").addClass('pure-table-striped');

  amountScrolled = $("#top").offset()['top'];
  backToTop_setup();
  patchFigureHighlights();

  /* 1af857ea165ef513a05a323d30cd28846094b281 */
  LA_BADGE = '<span class="la-badge"><a href="/products/fastly-product-lifecycle#limited-availability" class="badge badge-info">Limited Availability</a></span>';
  $(".add-la-badge").append(LA_BADGE);
} );

function affix_setup() {

  if( $( "#api-nav-active" ).length==0 ) { return; }

  $('#api-nav').affix({
    offset: {
      top: $('#api-nav-active').offset().top,
      bottom: $('#api-nav').offset().bottom,
    }
  })

  $( "#api-nav").on( "affixed.bs.affix", function() {
    $(".affix").css("top", 10);
  } );

  //also run it now, incase this page was loaded not at top
  $(".affix").css("top", 10);
}

function scrollspy_setup() {
  if( location.pathname.match("^/api/clients") ) { return; }

  $('body').scrollspy({ target: '#api-nav-content' })
}

function backToTop_setup() {
  $(window).scroll(function() {
  	if ( $(window).scrollTop() > amountScrolled ) {
  		$('a.back-to-top').fadeIn('slow');
  	} else {
  		$('a.back-to-top').fadeOut('slow');
  	}
  });

  $('a.back-to-top').click(function() {
  	$('html, body').animate({
  		scrollTop: amountScrolled
  	}, 700);
  	return false;
  });
}

/* highlighted code created by the highlight tag has a diffrent xpath structure than ones generated by ticks.
   this code attemps to normalize the classes, so that one set of css can target both */
function patchFigureHighlights() {
  $("figure.highlight").each( function(){
    fig = $(this);
    /* oatch the first pre */
    fig.find(">pre").addClass('highlight');
    /* extract the language from the grandchild's data attribute */
    var lang = fig.find("code[data-lang]").data('lang');
    /* slap it as a class to the top level figure */
    fig.addClass("language-"+lang);
  });
}
;
$(document).ready( function(){
  SectionNavActiveBars();
  markCurrentPage();
  markCurrentSecNav()
});

function markCurrentPage () {
  $("#left_column div.ia-nav a[href='"+ location.pathname +"']").parent("li").addClass('this-page');
}

function markCurrentSecNav () {
  var pnav = $('#current_nav').data('ppnav');
  var snav = $('#current_nav').data('psnav');
  if( pnav == "" || snav == "" ) return;
  $("#left_column div.ia-nav details[data-pnav='"+ pnav +"'][data-snav='"+ snav +"']").addClass('my-snav');
  $("#left_column div.ia-nav details.my-snav").attr('open', '');
}

function SectionNavActiveBars() {
  $(".site-links li").each( function() {
    var matchData = $(this).data('match');
    var pattern = new RegExp("^" + matchData + "");
    if( location.pathname.match(pattern) ) {
      $(this).addClass('active');
    }
  } );
}
;
$(document).ready( function(){
  var hp = getHashParams();
  if( typeof hp['stq'] !== "undefined" ) {
    $("#search-head").text("Search results");
    $("#st-default-search-input").val( hp['stq'] );
  } else {
    var qp = getParameterByName('stq');
    if( qp && qp.length > 0 ) {
      var nurl = `${window.location.protocol}//${window.location.host}${window.location.pathname}#stp=1&stq=${qp}`
      window.location.replace(nurl);
      return;
    }
  }

  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
  })(window,document,'script','https://s.swiftypecdn.com/install/v2/st.js','_st');

  _st('install','CTAsCU6ktwqaKeTxCkPW','2.0.0');

});

function getHashParams() {

  var hashParams = {};
  var e,
      a = /\+/g,  // Regex for replacing addition symbol with a space
      r = /([^&;=]+)=?([^&;]*)/g,
      d = function (s) { return decodeURIComponent(s.replace(a, " ")); },
      q = window.location.hash.substring(1);

  while (e = r.exec(q))
     hashParams[d(e[1])] = d(e[2]);

  return hashParams;
}

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
;
/* HT to http://ben.balter.com/2014/03/13/pages-anchor-links/ */

$(function() {
  return $("h2, h3, h4, h5, h6").each(function(i, el) {
    var $el, icon, id;
    $el = $(el);
    id = $el.attr('id');
    icon = '<span class="fas fa-link"></span>';
    if (id) {
      return $el.append($("<a />").addClass("header-link").attr("href", "#" + id).html(icon));
    }
  });
});
$(function() {
  return $(".right.api .action").each(function(i, el) {
    var $el, icon, id;
    $el = $(el);
    id = $el.attr('id');
    icon = '<span class="fas fa-link fa-lg"></span>';
    if (id) {
      return $el.find(".prettyline").first().prepend($("<a />").addClass("header-link").attr("href", "#" + id).html(icon));
    }
  });
});
// https://github.com/ghiculescu/jekyll-table-of-contents
(function($){
  $.fn.toc = function(options) {
    var defaults = {
      noBackToTopLinks: true,
      title: '<div class="cursor-pointer py-0 px-3 " id="headingToc" role="button" data-toggle="collapse" data-parent="#headingToc" href="#collapseToc" aria-expanded="true" aria-controls="collapseToc">'+
      '<b>Contents</b>'+
      '</div>'+
      '<div id="collapseToc" class="collapse show" role="tabpanel" aria-labelledby="headingToc">'+
      '<div class="card-body p-1">',
      minimumHeaders: 3,
      headers: 'h1, h2, h3, h4, h5, h6',
      listType: 'ul', // values: [ol|ul]
      showEffect: 'none', // values: [show|slideDown|fadeIn|none]
      showSpeed: 'slow', // set to 0 to deactivate effect
      classes: { list: 'list-unstyled mb-0 ml-2',
                 item: ''
               }
    },
    settings = $.extend(defaults, options);

    function fixedEncodeURIComponent (str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16);
      });
    }

    function createLink (header) {
      var innerText = (header.textContent === undefined) ? header.innerText : header.textContent;
      if (header.children.length > 1) {
        innerText = header.firstChild.textContent;
      }
      return "<a href='#" + fixedEncodeURIComponent(header.id) + "'>" + innerText + "</a>";
    }

    var headers = $(settings.headers).filter(function() {
      // get all headers with an ID
      var previousSiblingName = $(this).prev().attr( "name" );
      if (!this.id && previousSiblingName) {
        this.id = $(this).attr( "id", previousSiblingName.replace(/\./g, "-") );
      }
      return this.id;
    }), output = $(this);
    if (!headers.length || headers.length < settings.minimumHeaders || !output.length) {
      $(this).hide();
      return;
    }

    if (0 === settings.showSpeed) {
      settings.showEffect = 'none';
    }

    var render = {
      show: function() { output.hide().html(html).show(settings.showSpeed); },
      slideDown: function() { output.hide().html(html).slideDown(settings.showSpeed); },
      fadeIn: function() { output.hide().html(html).fadeIn(settings.showSpeed); },
      none: function() { output.html(html); }
    };

    var get_level = function(ele) { return parseInt(ele.nodeName.replace("H", ""), 10); };
    var highest_level = headers.map(function(_, ele) { return get_level(ele); }).get().sort()[0];
    var return_to_top = '<i class="icon-arrow-up back-to-top"> </i>';

    var level = get_level(headers[0]),
      this_level,
      html = settings.title + " <" +settings.listType + " class=\"" + settings.classes.list +"\">";
    headers.on('click', function() {
      if (!settings.noBackToTopLinks) {
        window.location.hash = this.id;
      }
    })
    .addClass('clickable-header')
    .each(function(_, header) {
      this_level = get_level(header);
      if (!settings.noBackToTopLinks && this_level === highest_level) {
        $(header).addClass('top-level-header').after(return_to_top);
      }
      if (this_level === level) // same level as before; same indenting
        html += "<li class=\"" + settings.classes.item + "\">" + createLink(header);
      else if (this_level <= level){ // higher level than before; end parent ol
        for(i = this_level; i < level; i++) {
          html += "</li></"+settings.listType+">"
        }
        html += "<li class=\"" + settings.classes.item + "\">" + createLink(header);
      }
      else if (this_level > level) { // lower level than before; expand the previous to contain a ol
        for(i = this_level; i > level; i--) {
          html += "<" + settings.listType + " class=\"" + settings.classes.list +"\">" +
                  "<li class=\"" + settings.classes.item + "\">"
        }
        html += createLink(header);
      }
      level = this_level; // update for the next one
    });
    html += "</"+settings.listType+"></div></div>";
    if (!settings.noBackToTopLinks) {
      $(document).on('click', '.back-to-top', function() {
        $(window).scrollTop(0);
        window.location.hash = '';
      });
    }

    render[settings.showEffect]();
  };
})(jQuery);

jQuery(document).ready(function() {
  let toc_tenmp, toc_options = {};

  if( toc_temp = jQuery('#toc').data('toc-headers') ) {
    toc_options['headers'] = toc_temp;
  }
  if( toc_temp = jQuery('#toc').data('toc-minimumheaders') ) {
    toc_options['minimumHeaders'] = parseInt(toc_temp,10);
  }
  jQuery('#toc').show().css('display','inline-block').toc(toc_options);
});
// for the service status — taken from http://codepen.io/stevenklein/pen/mznjG

var sp = new StatusPage.page({ page: '889dh1w1xtt0'});

sp.summary({
  success: function(data) {
    // adds the text description to the dropdown
    $('.color-description').text(data.status.description);
    // appends the status indicator as a class name so we can use the right color for the status light thing
    $('.color-dot').addClass(data.status.indicator);
  }
});
RV_KEY = 'recentViewed';

$(document).ready(function() {
  $('#recentClear').on('click', rvStackClear);

  rvAddMe();

  rvShow();
});

function rvShow() {
  var rv = rvStackGet();
  if(rv.length == 0) { return; }

  var added = 0;
  for(var looper=0; looper<rv.length; looper++) {
    // dont add our self to the box
    if( rv[looper][0] == location.pathname ) { continue; }
    // build it
    var nuLink = $('<a>').attr('href', rv[looper][0]).text(rv[looper][1])
    var nuList = $('<li>').addClass('list-group-item').append(nuLink);
    // inject it
    $('#recentViewedItems').prepend( nuList );
    added += 1;
  }

  //only show if we injected any not us
  if(added) {
    $('#recentViewed').show().removeClass('d-none');
  }
}

function rvStackGet() {
  var rv = localStorage.getItem(RV_KEY);
  if( !rv ) {
    return [];
  }
  try {
    var out = JSON.parse(rv);
  }
  catch (e) {
    // failed to parse, just return an empty stack array
    return [];
  }
  return out;
}

function rvStackPush(url,title) {
  // fetch and unpack
  var rv = rvStackGet();
  var nu = [];

  // looped copy, avoid index removal bug
  for(var loop=0; loop<rv.length; loop++) {
    if(rv[loop][0] == url) {
      //dont copy our self
      continue;
    }
    nu.push( rv[loop] );
  }

  // add our self to newest slot
  nu.push([url,title]);

  // trim the fat
  while( nu.length > 5 ) {
    nu.shift();
  }

  // pack and store
  localStorage.setItem(RV_KEY, JSON.stringify(nu));
}

function rvAddMe() {
  var rvflag = $('section.rtitle[data-rv-add=true]');
  if( rvflag.length == 0 ) return;

  var htext = rvflag.find('.rheader').text();
  if( htext == "") return;
  rvStackPush( location.pathname, htext );
}

function rvStackClear() {
  //wipe the actual stack
  localStorage.removeItem(RV_KEY);
  //eyecandy for the humans
  $('#recentViewedItems li').fadeOut("normal", function() {
    $(this).remove();
  });
}
;
$(document).ready( function(){

  $('.banner').on('closed.bs.alert', function () {
    var bsrc = $(this).data('src');
    var bstr = `banner-${bsrc}`;
    localStorage.setItem(bstr, Date.now());
  });

  if( localStorage.length ) {
    for(var ki=0; ki< localStorage.length; ki++) {
      var kn = localStorage.key(ki);
      var m = kn.match(/^banner-(.*)/);
      if( m ) {
        $(`.banner[data-src="${m[1]}"]`).remove();
      }
    }
  }
} );
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-25770359-7', {
  cookieDomain: 'docs.fastly.com',
  siteSpeedSampleRate: 100
});

ga('send', 'pageview', location.pathname);
function googleTranslateElementInit() {
  new google.translate.TranslateElement(
    {pageLanguage: 'en',
     layout: google.translate.TranslateElement.InlineLayout.SIMPLE,
     gaTrack: true,
     gaId: 'UA-25770359-7'
    },
    'google_translate_element');
}
;










